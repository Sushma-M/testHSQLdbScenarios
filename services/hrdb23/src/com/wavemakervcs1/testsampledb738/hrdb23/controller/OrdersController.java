/*Copyright (c) 2015-2016 wavemakervcs1.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemakervcs1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemakervcs1.com*/

package com.wavemakervcs1.testsampledb738.hrdb23.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.wavemakervcs1.testsampledb738.hrdb23.service.OrdersService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.wavemakervcs1.testsampledb738.hrdb23.*;
import com.wavemakervcs1.testsampledb738.hrdb23.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Orders.
 * @see com.wavemakervcs1.testsampledb738.hrdb23.Orders
 */
@RestController(value = "Hrdb23.OrdersController")
@RequestMapping("/hrdb23/Orders")
@Api(description = "Exposes APIs to work with Orders resource.", value = "OrdersController")
public class OrdersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrdersController.class);

    @Autowired
    @Qualifier("hrdb23.OrdersService")
    private OrdersService ordersService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Orders instances matching the search criteria.")
    public Page<Orders> findOrderss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Orderss list");
        return ordersService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Orders instances.")
    public Page<Orders> getOrderss(Pageable pageable) {
        LOGGER.debug("Rendering Orderss list");
        return ordersService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Orders instance associated with the given id.")
    public Orders getOrders(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Orders with id: {}", id);
        Orders instance = ordersService.findById(id);
        LOGGER.debug("Orders details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Orders instance associated with the given id.")
    public boolean deleteOrders(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Orders with id: {}", id);
        Orders deleted = ordersService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Orders instance associated with the given id.")
    public Orders editOrders(@PathVariable("id") Integer id, @RequestBody Orders instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Orders with id: {}", instance.getOrderId());
        instance.setOrderId(id);
        instance = ordersService.update(instance);
        LOGGER.debug("Orders details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Orders instance.")
    public Orders createOrders(@RequestBody Orders instance) {
        LOGGER.debug("Create Orders with information: {}", instance);
        instance = ordersService.create(instance);
        LOGGER.debug("Created Orders with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setOrdersService(OrdersService service) {
        this.ordersService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Orders instances.")
    public Long countAllOrderss() {
        LOGGER.debug("counting Orderss");
        Long count = ordersService.countAll();
        return count;
    }
}
