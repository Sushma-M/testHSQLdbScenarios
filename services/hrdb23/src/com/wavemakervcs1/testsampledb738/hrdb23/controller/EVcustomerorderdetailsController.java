/*Copyright (c) 2015-2016 wavemakervcs1.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemakervcs1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemakervcs1.com*/

package com.wavemakervcs1.testsampledb738.hrdb23.controller; 

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.wavemakervcs1.testsampledb738.hrdb23.service.EVcustomerorderdetailsService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;

import com.wavemakervcs1.testsampledb738.hrdb23.*;
import com.wavemakervcs1.testsampledb738.hrdb23.service.*;


/**
 * Controller object for domain model class EVcustomerorderdetails.
 * @see com.wavemakervcs1.testsampledb738.hrdb23.EVcustomerorderdetails
 */

@RestController(value = "Hrdb23.EVcustomerorderdetailsController")
@Api(value = "/hrdb23/EVcustomerorderdetails", description = "Exposes APIs to work with EVcustomerorderdetails resource.")
@RequestMapping("/hrdb23/EVcustomerorderdetails")
public class EVcustomerorderdetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EVcustomerorderdetailsController.class);

	@Autowired
	@Qualifier("hrdb23.EVcustomerorderdetailsService")
	private EVcustomerorderdetailsService eVcustomerorderdetailsService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EVcustomerorderdetails instances matching the search criteria.")
	public Page<EVcustomerorderdetails> findEVcustomerorderdetailss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EVcustomerorderdetailss list");
		return eVcustomerorderdetailsService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EVcustomerorderdetails instances.")
	public Page<EVcustomerorderdetails> getEVcustomerorderdetailss(Pageable pageable) {
		LOGGER.debug("Rendering EVcustomerorderdetailss list");
		return eVcustomerorderdetailsService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EVcustomerorderdetails instances.")
	public Long countAllEVcustomerorderdetailss() {
		LOGGER.debug("counting EVcustomerorderdetailss");
		Long count = eVcustomerorderdetailsService.countAll();
		return count;
	}


	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the EVcustomerorderdetails instance associated with the given composite-id.")
	public EVcustomerorderdetails getEVcustomerorderdetails( @RequestParam("orderId") Integer orderId, @RequestParam("custName") String custName, @RequestParam("amount") Integer amount, @RequestParam("date") Date date)
	 throws EntityNotFoundException {
	    EVcustomerorderdetailsId temp = new EVcustomerorderdetailsId();
	    temp.setOrderId(orderId);
	    temp.setCustName(custName);
	    temp.setAmount(amount);
	    temp.setDate(date);
		LOGGER.debug("Getting EVcustomerorderdetails with id: {}" , temp);
		EVcustomerorderdetails instance = eVcustomerorderdetailsService.findById(temp);
		LOGGER.debug("EVcustomerorderdetails details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the EVcustomerorderdetails instance associated with the given composite-id.")
	public boolean deleteEVcustomerorderdetails( @RequestParam("orderId") Integer orderId, @RequestParam("custName") String custName, @RequestParam("amount") Integer amount, @RequestParam("date") Date date)throws EntityNotFoundException {
	    EVcustomerorderdetailsId temp = new EVcustomerorderdetailsId();
        temp.setOrderId(orderId);
        temp.setCustName(custName);
        temp.setAmount(amount);
        temp.setDate(date);
		LOGGER.debug("Deleting EVcustomerorderdetails with id: {}" , temp);
		EVcustomerorderdetails deleted = eVcustomerorderdetailsService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the EVcustomerorderdetails instance associated with the given composite-id.")
	public EVcustomerorderdetails editEVcustomerorderdetails( @RequestParam("orderId") Integer orderId, @RequestParam("custName") String custName, @RequestParam("amount") Integer amount, @RequestParam("date") Date date, @RequestBody EVcustomerorderdetails instance) throws EntityNotFoundException {
	    EVcustomerorderdetailsId temp = new EVcustomerorderdetailsId();
         temp.setOrderId(orderId);
         temp.setCustName(custName);
         temp.setAmount(amount);
         temp.setDate(date);
        eVcustomerorderdetailsService.delete(temp);
        instance = eVcustomerorderdetailsService.create(instance);
	    LOGGER.debug("EVcustomerorderdetails details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EVcustomerorderdetails instance.")
	public EVcustomerorderdetails createEVcustomerorderdetails(@RequestBody EVcustomerorderdetails instance) {
		LOGGER.debug("Create EVcustomerorderdetails with information: {}" , instance);
		instance = eVcustomerorderdetailsService.create(instance);
		LOGGER.debug("Created EVcustomerorderdetails with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEVcustomerorderdetailsService(EVcustomerorderdetailsService service) {
		this.eVcustomerorderdetailsService = service;
	}
}

