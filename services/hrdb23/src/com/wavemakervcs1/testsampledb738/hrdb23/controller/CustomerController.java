/*Copyright (c) 2015-2016 wavemakervcs1.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemakervcs1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemakervcs1.com*/

package com.wavemakervcs1.testsampledb738.hrdb23.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.wavemakervcs1.testsampledb738.hrdb23.service.CustomerService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.wavemakervcs1.testsampledb738.hrdb23.*;
import com.wavemakervcs1.testsampledb738.hrdb23.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Customer.
 * @see com.wavemakervcs1.testsampledb738.hrdb23.Customer
 */
@RestController(value = "Hrdb23.CustomerController")
@RequestMapping("/hrdb23/Customer")
@Api(description = "Exposes APIs to work with Customer resource.", value = "CustomerController")
public class CustomerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerController.class);

    @Autowired
    @Qualifier("hrdb23.CustomerService")
    private CustomerService customerService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Customer instances matching the search criteria.")
    public Page<Customer> findCustomers(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Customers list");
        return customerService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Customer instances.")
    public Page<Customer> getCustomers(Pageable pageable) {
        LOGGER.debug("Rendering Customers list");
        return customerService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Customer instance associated with the given id.")
    public Customer getCustomer(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Customer with id: {}", id);
        Customer instance = customerService.findById(id);
        LOGGER.debug("Customer details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Customer instance associated with the given id.")
    public boolean deleteCustomer(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Customer with id: {}", id);
        Customer deleted = customerService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Customer instance associated with the given id.")
    public Customer editCustomer(@PathVariable("id") Integer id, @RequestBody Customer instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Customer with id: {}", instance.getCustId());
        instance.setCustId(id);
        instance = customerService.update(instance);
        LOGGER.debug("Customer details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Customer instance.")
    public Customer createCustomer(@RequestBody Customer instance) {
        LOGGER.debug("Create Customer with information: {}", instance);
        instance = customerService.create(instance);
        LOGGER.debug("Created Customer with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setCustomerService(CustomerService service) {
        this.customerService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Customer instances.")
    public Long countAllCustomers() {
        LOGGER.debug("counting Customers");
        Long count = customerService.countAll();
        return count;
    }
}
