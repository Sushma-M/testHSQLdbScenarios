/*Copyright (c) 2015-2016 wavemakervcs1.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemakervcs1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemakervcs1.com*/

package com.wavemakervcs1.testsampledb738.hrdb23.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.wavemakervcs1.testsampledb738.hrdb23.*;

/**
 * Service object for domain model class Customer.
 * @see com.wavemakervcs1.testsampledb738.hrdb23.Customer
 */

public interface CustomerService {
   /**
	 * Creates a new customer.
	 * 
	 * @param created
	 *            The information of the created customer.
	 * @return The created customer.
	 */
	public Customer create(Customer created);

	/**
	 * Deletes a customer.
	 * 
	 * @param customerId
	 *            The id of the deleted customer.
	 * @return The deleted customer.
	 * @throws EntityNotFoundException
	 *             if no customer is found with the given id.
	 */
	public Customer delete(Integer customerId) throws EntityNotFoundException;

	/**
	 * Finds all customers.
	 * 
	 * @return A list of customers.
	 */
	public Page<Customer> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Customer> findAll(Pageable pageable);
	
	/**
	 * Finds customer by id.
	 * 
	 * @param id
	 *            The id of the wanted customer.
	 * @return The found customer. If no customer is found, this method returns
	 *         null.
	 */
	public Customer findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a customer.
	 * 
	 * @param updated
	 *            The information of the updated customer.
	 * @return The updated customer.
	 * @throws EntityNotFoundException
	 *             if no customer is found with given id.
	 */
	public Customer update(Customer updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the customers in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the customer.
	 */

	public long countAll();


    public Page<Customer> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

