/*Copyright (c) 2015-2016 wavemakervcs1.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemakervcs1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemakervcs1.com*/

package com.wavemakervcs1.testsampledb738.hrdb23.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.wavemakervcs1.testsampledb738.hrdb23.*;


/**
 * ServiceImpl object for domain model class EVcustomerorderdetails.
 * @see com.wavemakervcs1.testsampledb738.hrdb23.EVcustomerorderdetails
 */
@Service("hrdb23.EVcustomerorderdetailsService")
public class EVcustomerorderdetailsServiceImpl implements EVcustomerorderdetailsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EVcustomerorderdetailsServiceImpl.class);

    @Autowired
    @Qualifier("hrdb23.EVcustomerorderdetailsDao")
    private WMGenericDao<EVcustomerorderdetails, EVcustomerorderdetailsId> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<EVcustomerorderdetails, EVcustomerorderdetailsId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "hrdb23TransactionManager")
     public Page<EVcustomerorderdetails> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "hrdb23TransactionManager")
    @Override
    public EVcustomerorderdetails create(EVcustomerorderdetails evcustomerorderdetails) {
        LOGGER.debug("Creating a new evcustomerorderdetails with information: {}" , evcustomerorderdetails);
        return this.wmGenericDao.create(evcustomerorderdetails);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "hrdb23TransactionManager")
    @Override
    public EVcustomerorderdetails delete(EVcustomerorderdetailsId evcustomerorderdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting evcustomerorderdetails with id: {}" , evcustomerorderdetailsId);
        EVcustomerorderdetails deleted = this.wmGenericDao.findById(evcustomerorderdetailsId);
        if (deleted == null) {
            LOGGER.debug("No evcustomerorderdetails found with id: {}" , evcustomerorderdetailsId);
            throw new EntityNotFoundException(String.valueOf(evcustomerorderdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "hrdb23TransactionManager")
    @Override
    public Page<EVcustomerorderdetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all evcustomerorderdetailss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "hrdb23TransactionManager")
    @Override
    public Page<EVcustomerorderdetails> findAll(Pageable pageable) {
        LOGGER.debug("Finding all evcustomerorderdetailss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "hrdb23TransactionManager")
    @Override
    public EVcustomerorderdetails findById(EVcustomerorderdetailsId id) throws EntityNotFoundException {
        LOGGER.debug("Finding evcustomerorderdetails by id: {}" , id);
        EVcustomerorderdetails evcustomerorderdetails=this.wmGenericDao.findById(id);
        if(evcustomerorderdetails==null){
            LOGGER.debug("No evcustomerorderdetails found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return evcustomerorderdetails;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "hrdb23TransactionManager")
    @Override
    public EVcustomerorderdetails update(EVcustomerorderdetails updated) throws EntityNotFoundException {
        LOGGER.debug("Updating evcustomerorderdetails with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((EVcustomerorderdetailsId)updated.getId());
    }

    @Transactional(readOnly = true, value = "hrdb23TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


