/*Copyright (c) 2015-2016 wavemakervcs1.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemakervcs1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemakervcs1.com*/

package com.wavemakervcs1.testsampledb738.hrdb23.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.wavemakervcs1.testsampledb738.hrdb23.*;


/**
 * ServiceImpl object for domain model class Customer.
 * @see com.wavemakervcs1.testsampledb738.hrdb23.Customer
 */
@Service("hrdb23.CustomerService")
public class CustomerServiceImpl implements CustomerService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerServiceImpl.class);

    @Autowired
    @Qualifier("hrdb23.CustomerDao")
    private WMGenericDao<Customer, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Customer, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "hrdb23TransactionManager")
     public Page<Customer> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "hrdb23TransactionManager")
    @Override
    public Customer create(Customer customer) {
        LOGGER.debug("Creating a new customer with information: {}" , customer);
        return this.wmGenericDao.create(customer);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "hrdb23TransactionManager")
    @Override
    public Customer delete(Integer customerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting customer with id: {}" , customerId);
        Customer deleted = this.wmGenericDao.findById(customerId);
        if (deleted == null) {
            LOGGER.debug("No customer found with id: {}" , customerId);
            throw new EntityNotFoundException(String.valueOf(customerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "hrdb23TransactionManager")
    @Override
    public Page<Customer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all customers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "hrdb23TransactionManager")
    @Override
    public Page<Customer> findAll(Pageable pageable) {
        LOGGER.debug("Finding all customers");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "hrdb23TransactionManager")
    @Override
    public Customer findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding customer by id: {}" , id);
        Customer customer=this.wmGenericDao.findById(id);
        if(customer==null){
            LOGGER.debug("No customer found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return customer;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "hrdb23TransactionManager")
    @Override
    public Customer update(Customer updated) throws EntityNotFoundException {
        LOGGER.debug("Updating customer with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getCustId());
    }

    @Transactional(readOnly = true, value = "hrdb23TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


